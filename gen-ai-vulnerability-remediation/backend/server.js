const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const dotenv = require('dotenv');
const path = require('path');
const cookieParser = require('cookie-parser');

// Load environment variables
dotenv.config();

// Import routes
const scanRoutes = require('./api/scanRoutes');
const aiRoutes = require('./api/aiRoutes');
const remediationRoutes = require('./api/remediationRoutes');
const uploadRoutes = require('./api/uploadRoutes');
const githubRoutes = require('./api/githubRoutes');

// Initialize express app
const app = express();

// Middleware
app.use(helmet()); // Security headers
app.use(compression()); // Compress responses
app.use(cors()); // Enable CORS
app.use(cookieParser()); // Parse cookies
app.use(express.json()); // Parse JSON bodies

// Routes
app.use('/api/scan', scanRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/remediation', remediationRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/github', githubRoutes);

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', message: 'Server is running' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// Start server
const PORT = process.env.PORT || 5000;
const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
}).on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.log(`Port ${PORT} is already in use. Trying alternative port ${PORT + 1}...`);
    // Try alternative port
    const alternativePort = PORT + 1;
    app.listen(alternativePort, () => {
      console.log(`Server running on alternative port ${alternativePort}`);
    }).on('error', (err) => {
      console.error('Failed to start server on alternative port:', err.message);
      process.exit(1);
    });
  } else {
    console.error('Failed to start server:', err.message);
    process.exit(1);
  }
});

module.exports = app; // For testing