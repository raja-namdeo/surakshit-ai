/**
 * ZAP Service
 * Handles integration with OWASP ZAP API for vulnerability scanning
 */

const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

// Default ZAP API configuration
const defaultZapConfig = {
  apiKey: process.env.ZAP_API_KEY || '',
  zapBaseUrl: process.env.ZAP_API_URL || 'http://localhost:8080',
  timeout: 60000 // 1 minute timeout for API calls
};

/**
 * Initialize a new ZAP session
 * @param {Object} config - ZAP configuration
 * @returns {Object} Session information
 */
const initializeSession = async (config = defaultZapConfig) => {
  try {
    const sessionId = `session-${uuidv4()}`;
    const response = await axios.get(`${config.zapBaseUrl}/JSON/core/action/newSession/`, {
      params: {
        apikey: config.apiKey,
        name: sessionId,
        overwrite: true
      },
      timeout: config.timeout
    });
    
    return {
      sessionId,
      success: response.data.Result === 'OK',
      message: response.data.Result
    };
  } catch (error) {
    console.error('Error initializing ZAP session:', error);
    throw new Error(`Failed to initialize ZAP session: ${error.message}`);
  }
};

/**
 * Start a spider scan
 * @param {string} target - URL to scan
 * @param {Object} params - Spider scan parameters
 * @param {Object} config - ZAP configuration
 * @returns {Object} Scan information
 */
const startSpiderScan = async (target, params = {}, config = defaultZapConfig) => {
  try {
    const response = await axios.get(`${config.zapBaseUrl}/JSON/spider/action/scan/`, {
      params: {
        apikey: config.apiKey,
        url: target,
        maxChildren: params.maxDepth || 5,
        recurse: true,
        contextName: '',
        subtreeOnly: false,
        ...params
      },
      timeout: config.timeout
    });
    
    return {
      scanId: response.data.scan,
      success: true,
      message: 'Spider scan started'
    };
  } catch (error) {
    console.error('Error starting spider scan:', error);
    throw new Error(`Failed to start spider scan: ${error.message}`);
  }
};

/**
 * Start an AJAX spider scan
 * @param {string} target - URL to scan
 * @param {Object} params - AJAX spider scan parameters
 * @param {Object} config - ZAP configuration
 * @returns {Object} Scan information
 */
const startAjaxSpiderScan = async (target, params = {}, config = defaultZapConfig) => {
  try {
    const response = await axios.get(`${config.zapBaseUrl}/JSON/ajaxSpider/action/scan/`, {
      params: {
        apikey: config.apiKey,
        url: target,
        inScope: true,
        ...params
      },
      timeout: config.timeout
    });
    
    return {
      success: response.data.Result === 'OK',
      message: response.data.Result
    };
  } catch (error) {
    console.error('Error starting AJAX spider scan:', error);
    throw new Error(`Failed to start AJAX spider scan: ${error.message}`);
  }
};

/**
 * Start an active scan
 * @param {string} target - URL to scan
 * @param {Object} params - Active scan parameters
 * @param {Object} config - ZAP configuration
 * @returns {Object} Scan information
 */
const startActiveScan = async (target, params = {}, config = defaultZapConfig) => {
  try {
    const response = await axios.get(`${config.zapBaseUrl}/JSON/ascan/action/scan/`, {
      params: {
        apikey: config.apiKey,
        url: target,
        recurse: true,
        inScopeOnly: false,
        scanPolicyName: params.scanPolicyName || '',
        method: '',
        postData: '',
        ...params
      },
      timeout: config.timeout
    });
    
    return {
      scanId: response.data.scan,
      success: true,
      message: 'Active scan started'
    };
  } catch (error) {
    console.error('Error starting active scan:', error);
    throw new Error(`Failed to start active scan: ${error.message}`);
  }
};

/**
 * Check the status of a scan
 * @param {string} scanId - ID of the scan to check
 * @param {string} scanType - Type of scan (spider, ascan)
 * @param {Object} config - ZAP configuration
 * @returns {Object} Scan status
 */
const checkScanStatus = async (scanId, scanType = 'spider', config = defaultZapConfig) => {
  try {
    const endpoint = scanType === 'spider' 
      ? `/JSON/spider/view/status/`
      : `/JSON/ascan/view/status/`;
    
    const response = await axios.get(`${config.zapBaseUrl}${endpoint}`, {
      params: {
        apikey: config.apiKey,
        scanId
      },
      timeout: config.timeout
    });
    
    const status = parseInt(response.data.status || 0);
    
    return {
      scanId,
      status,
      completed: status >= 100,
      progress: `${status}%`
    };
  } catch (error) {
    console.error(`Error checking ${scanType} scan status:`, error);
    throw new Error(`Failed to check scan status: ${error.message}`);
  }
};

/**
 * Check if AJAX spider is running
 * @param {Object} config - ZAP configuration
 * @returns {boolean} Whether AJAX spider is running
 */
const isAjaxSpiderRunning = async (config = defaultZapConfig) => {
  try {
    const response = await axios.get(`${config.zapBaseUrl}/JSON/ajaxSpider/view/status/`, {
      params: {
        apikey: config.apiKey
      },
      timeout: config.timeout
    });
    
    return response.data.running === 'true';
  } catch (error) {
    console.error('Error checking AJAX spider status:', error);
    throw new Error(`Failed to check AJAX spider status: ${error.message}`);
  }
};

/**
 * Get scan results
 * @param {Object} config - ZAP configuration
 * @returns {Array} Scan alerts
 */
const getScanResults = async (config = defaultZapConfig) => {
  try {
    const response = await axios.get(`${config.zapBaseUrl}/JSON/core/view/alerts/`, {
      params: {
        apikey: config.apiKey,
        baseurl: '',
        start: 0,
        count: 100,
        riskId: ''
      },
      timeout: config.timeout
    });
    
    return response.data.alerts.map(alert => ({
      id: uuidv4(),
      type: alert.name,
      severity: mapZapRiskToSeverity(alert.risk),
      description: alert.description,
      solution: alert.solution,
      reference: alert.reference,
      location: alert.url,
      parameter: alert.param,
      evidence: alert.evidence,
      cweId: alert.cweid,
      wascId: alert.wascid,
      detectedAt: new Date().toISOString(),
      status: 'open'
    }));
  } catch (error) {
    console.error('Error getting scan results:', error);
    throw new Error(`Failed to get scan results: ${error.message}`);
  }
};

/**
 * Map ZAP risk levels to severity levels
 * @param {string} risk - ZAP risk level
 * @returns {string} Severity level
 */
const mapZapRiskToSeverity = (risk) => {
  const riskMap = {
    '0': 'info',
    '1': 'low',
    '2': 'medium',
    '3': 'high'
  };
  
  return riskMap[risk] || 'info';
};

/**
 * Configure ZAP scanners based on profile
 * @param {Array|string} scanners - List of scanners to enable or 'all'
 * @param {Object} config - ZAP configuration
 */
const configureScanners = async (scanners, config = defaultZapConfig) => {
  try {
    // First disable all scanners
    await axios.get(`${config.zapBaseUrl}/JSON/ascan/action/disableAllScanners/`, {
      params: {
        apikey: config.apiKey
      },
      timeout: config.timeout
    });
    
    // Then enable the specified scanners
    if (scanners === 'all') {
      await axios.get(`${config.zapBaseUrl}/JSON/ascan/action/enableAllScanners/`, {
        params: {
          apikey: config.apiKey
        },
        timeout: config.timeout
      });
    } else if (Array.isArray(scanners)) {
      // Map scanner names to IDs and enable them
      // This is a simplified version - in a real implementation,
      // you would need to map scanner names to their actual IDs in ZAP
      for (const scanner of scanners) {
        // This is a placeholder - in a real implementation, you would
        // map the scanner name to its ID and enable it
        console.log(`Enabling scanner: ${scanner}`);
      }
    }
    
    return {
      success: true,
      message: 'Scanners configured successfully'
    };
  } catch (error) {
    console.error('Error configuring scanners:', error);
    throw new Error(`Failed to configure scanners: ${error.message}`);
  }
};

/**
 * Set scan policy configuration
 * @param {Object} params - Scan parameters
 * @param {Object} config - ZAP configuration
 */
const setScanPolicy = async (params, config = defaultZapConfig) => {
  try {
    // Set attack strength
    if (params.attackStrength) {
      await axios.get(`${config.zapBaseUrl}/JSON/ascan/action/setOptionAttackStrength/`, {
        params: {
          apikey: config.apiKey,
          String: params.attackStrength
        },
        timeout: config.timeout
      });
    }
    
    // Set alert threshold
    if (params.alertThreshold) {
      await axios.get(`${config.zapBaseUrl}/JSON/ascan/action/setOptionAlertThreshold/`, {
        params: {
          apikey: config.apiKey,
          String: params.alertThreshold
        },
        timeout: config.timeout
      });
    }
    
    return {
      success: true,
      message: 'Scan policy configured successfully'
    };
  } catch (error) {
    console.error('Error setting scan policy:', error);
    throw new Error(`Failed to set scan policy: ${error.message}`);
  }
};

/**
 * Shutdown ZAP
 * @param {Object} config - ZAP configuration
 */
const shutdownZap = async (config = defaultZapConfig) => {
  try {
    const response = await axios.get(`${config.zapBaseUrl}/JSON/core/action/shutdown/`, {
      params: {
        apikey: config.apiKey
      },
      timeout: config.timeout
    });
    
    return {
      success: response.data.Result === 'OK',
      message: response.data.Result
    };
  } catch (error) {
    console.error('Error shutting down ZAP:', error);
    throw new Error(`Failed to shutdown ZAP: ${error.message}`);
  }
};

module.exports = {
  initializeSession,
  startSpiderScan,
  startAjaxSpiderScan,
  startActiveScan,
  checkScanStatus,
  isAjaxSpiderRunning,
  getScanResults,
  configureScanners,
  setScanPolicy,
  shutdownZap
};