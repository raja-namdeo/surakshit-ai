/**
 * AI Service
 * Handles AI-based analysis and recommendation generation
 */

const { v4: uuidv4 } = require('uuid');

// Mock database for MVP
const recommendations = [];
const feedbackData = [];

/**
 * Analyze vulnerabilities and generate remediation steps
 * @param {Array} vulnerabilities - List of vulnerabilities to analyze
 * @returns {Array} List of recommendations
 */
const analyzeVulnerabilities = async (vulnerabilities) => {
  try {
    console.log(`Analyzing ${vulnerabilities.length} vulnerabilities`);
    
    // In a real implementation, this would call an AI model API
    // For MVP, we'll generate mock recommendations
    
    const results = [];
    
    for (const vulnerability of vulnerabilities) {
      const recommendation = generateRecommendation(vulnerability);
      recommendations.push(recommendation);
      results.push(recommendation);
    }
    
    return results;
  } catch (error) {
    console.error('Error analyzing vulnerabilities:', error);
    throw new Error(`Analysis failed: ${error.message}`);
  }
};

/**
 * Submit feedback on AI recommendations
 * @param {string} recommendationId - ID of the recommendation
 * @param {boolean} isHelpful - Whether the recommendation was helpful
 * @param {string} comments - Additional feedback comments
 */
const submitFeedback = async (recommendationId, isHelpful, comments) => {
  try {
    // In a real implementation, this would store feedback in a database
    // and potentially use it to improve the AI model
    
    const feedback = {
      id: uuidv4(),
      recommendationId,
      isHelpful,
      comments,
      timestamp: new Date().toISOString()
    };
    
    feedbackData.push(feedback);
    
    return { success: true };
  } catch (error) {
    console.error('Error submitting feedback:', error);
    throw new Error(`Feedback submission failed: ${error.message}`);
  }
};

/**
 * Generate a recommendation for a vulnerability
 * @param {Object} vulnerability - Vulnerability to generate recommendation for
 * @returns {Object} Recommendation
 */
const generateRecommendation = (vulnerability) => {
  const recommendationId = uuidv4();
  
  // Generate recommendation based on vulnerability type
  let remediation = '';
  let code = '';
  
  switch (vulnerability.type) {
    case 'SQL Injection':
      remediation = 'Use parameterized queries or prepared statements instead of string concatenation. Implement input validation and sanitization.';
      code = `// Before (vulnerable)
const query = "SELECT * FROM users WHERE username = '" + username + "'";

// After (fixed)
const query = "SELECT * FROM users WHERE username = ?";
const params = [username];`;
      break;
      
    case 'Cross-Site Scripting (XSS)':
      remediation = 'Implement output encoding/escaping. Use Content Security Policy (CSP). Sanitize user inputs before rendering.';
      code = `// Before (vulnerable)
element.innerHTML = userInput;

// After (fixed)
const sanitizedInput = DOMPurify.sanitize(userInput);
element.innerHTML = sanitizedInput;`;
      break;
      
    case 'Outdated Dependencies':
      remediation = `Update the library in ${vulnerability.location} to the latest secure version. Review changelog for breaking changes before updating.`;
      code = `// Before (vulnerable)
"dependencies": {
  "express": "4.16.0"
}

// After (fixed)
"dependencies": {
  "express": "4.18.2"
}`;
      break;
      
    case 'Insecure Direct Object Reference':
      remediation = 'Implement proper access control checks. Use indirect references or verify user permissions before accessing resources.';
      code = `// Before (vulnerable)
app.get('/api/user/:id', (req, res) => {
  const userData = getUserById(req.params.id);
  res.json(userData);
});

// After (fixed)
app.get('/api/user/:id', (req, res) => {
  if (req.user.id !== req.params.id && !req.user.isAdmin) {
    return res.status(403).json({ error: 'Unauthorized' });
  }
  const userData = getUserById(req.params.id);
  res.json(userData);
});`;
      break;
      
    case 'Cross-Site Request Forgery':
      remediation = 'Implement CSRF tokens in forms and validate them on form submission. Use SameSite cookies.';
      code = `// Server-side implementation
app.use(csrf());

// In your form template
<form action="/submit" method="post">
  <input type="hidden" name="_csrf" value="<%= csrfToken %>">
  <!-- rest of the form -->
</form>`;
      break;
      
    case 'Insecure Authentication':
      remediation = 'Implement strong password policies. Use secure session management with proper timeout and renewal mechanisms.';
      code = `// Password validation
function isPasswordStrong(password) {
  return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{10,}$/.test(password);
}

// Secure session configuration
const sessionConfig = {
  secret: process.env.SESSION_SECRET,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 3600000, // 1 hour
    sameSite: 'strict'
  },
  resave: false,
  saveUninitialized: false
};`;
      break;
      
    case 'Sensitive Data Exposure':
      remediation = 'Avoid logging sensitive information. Implement proper data masking and encryption for sensitive data.';
      code = `// Before (vulnerable)
console.log(\`User login: \${username}, password: \${password}\`);

// After (fixed)
console.log(\`User login: \${username}\`);

// For necessary sensitive data logging, use masking
console.log(\`Credit card: \${maskCreditCard(cardNumber)}\`);

function maskCreditCard(cardNumber) {
  return cardNumber.slice(-4).padStart(cardNumber.length, '*');
}`;
      break;
      
    default:
      remediation = 'Conduct a thorough code review and implement security best practices.';
      code = '// Implement security best practices specific to your application';
  }
  
  return {
    id: recommendationId,
    vulnerabilityId: vulnerability.id,
    vulnerabilityType: vulnerability.type,
    severity: vulnerability.severity,
    location: vulnerability.location,
    remediation,
    code,
    confidence: Math.floor(Math.random() * 30) + 70, // Random confidence between 70-99%
    generatedAt: new Date().toISOString()
  };
};

module.exports = {
  analyzeVulnerabilities,
  submitFeedback
};