/**
 * User Model
 * Represents a user in the system
 */

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
  username: {
    type: String,
    required: [true, 'Username is required'],
    unique: true,
    trim: true,
    minlength: [3, 'Username must be at least 3 characters']
  },
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please provide a valid email']
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [8, 'Password must be at least 8 characters'],
    select: false // Don't return password by default
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user'
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  lastLogin: {
    type: Date
  }
});

// Hash password before saving
UserSchema.pre('save', async function(next) {
  if (!this.isModified('password')) {
    next();
  }
  
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

// Method to check if password matches
UserSchema.methods.matchPassword = async function(enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

// For MVP, we'll use a mock implementation instead of MongoDB
// This is just to show the schema structure
// In a real implementation, this would be used with MongoDB

// Mock User class for MVP
class User {
  constructor(data) {
    this.id = data.id || Math.random().toString(36).substring(2, 15);
    this.username = data.username;
    this.email = data.email;
    this.password = data.password; // In real app, this would be hashed
    this.role = data.role || 'user';
    this.createdAt = data.createdAt || new Date();
    this.lastLogin = data.lastLogin;
  }
  
  // Static methods
  static async findById(id) {
    // Mock implementation
    return mockUsers.find(user => user.id === id);
  }
  
  static async findByUsername(username) {
    // Mock implementation
    return mockUsers.find(user => user.username === username);
  }
  
  // Instance methods
  async save() {
    // Mock implementation
    const existingUserIndex = mockUsers.findIndex(user => user.id === this.id);
    if (existingUserIndex >= 0) {
      mockUsers[existingUserIndex] = this;
    } else {
      mockUsers.push(this);
    }
    return this;
  }
}

// Mock database
const mockUsers = [
  new User({
    id: '1',
    username: 'admin',
    email: 'admin@example.com',
    password: 'admin123', // In real app, this would be hashed
    role: 'admin',
    createdAt: new Date('2023-01-01')
  }),
  new User({
    id: '2',
    username: 'user',
    email: 'user@example.com',
    password: 'user123', // In real app, this would be hashed
    role: 'user',
    createdAt: new Date('2023-01-02')
  })
];

module.exports = User;