const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const AdmZip = require('adm-zip');
const scanService = require('../services/scanService');

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, '../uploads');
    
    // Create uploads directory if it doesn't exist
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    // Generate unique filename
    const uniqueId = uuidv4();
    cb(null, `${uniqueId}-${file.originalname}`);
  }
});

// File filter to only accept zip files
const fileFilter = (req, file, cb) => {
  if (file.mimetype === 'application/zip' || file.originalname.endsWith('.zip')) {
    cb(null, true);
  } else {
    cb(new Error('Only zip files are allowed'), false);
  }
};

// Configure upload middleware
const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB max file size
  }
});

/**
 * @route   POST /api/upload
 * @desc    Upload a zip file for scanning
 * @access  Public
 */
router.post('/', upload.single('codebase'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'No file uploaded or file is not a valid zip'
      });
    }
    
    const uploadedFilePath = req.file.path;
    const extractDir = path.join(
      __dirname, 
      '../uploads/extracted', 
      path.basename(uploadedFilePath, '.zip')
    );
    
    // Create extraction directory
    if (!fs.existsSync(extractDir)) {
      fs.mkdirSync(extractDir, { recursive: true });
    }
    
    // Extract zip file
    try {
      const zip = new AdmZip(uploadedFilePath);
      zip.extractAllTo(extractDir, true);
      
      // Validate extracted content
      const files = fs.readdirSync(extractDir);
      if (files.length === 0) {
        throw new Error('Zip file is empty');
      }
      
      // Initiate scan
      const scanResult = await scanService.performScan(extractDir, 'full');
      
      res.status(200).json({
        success: true,
        message: 'File uploaded and extracted successfully',
        scanId: scanResult.id,
        extractedFiles: files.length
      });
    } catch (extractError) {
      // Clean up on extraction error
      if (fs.existsSync(extractDir)) {
        fs.rmSync(extractDir, { recursive: true, force: true });
      }
      
      throw new Error(`Failed to extract zip file: ${extractError.message}`);
    }
  } catch (error) {
    console.error('Upload error:', error);
    
    // Clean up uploaded file on error
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    res.status(500).json({
      success: false,
      error: 'Failed to process uploaded file',
      message: error.message
    });
  }
});

module.exports = router;