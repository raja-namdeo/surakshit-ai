const express = require('express');
const router = express.Router();
const scanService = require('../services/scanService');

/**
 * @route   POST /api/scan
 * @desc    Initiate a vulnerability scan
 * @access  Public
 */
router.post('/', async (req, res) => {
  try {
    const { target, scanType } = req.body;
    
    if (!target) {
      return res.status(400).json({ error: 'Target URL or codebase path is required' });
    }
    
    const scanResult = await scanService.performScan(target, scanType || 'full');
    
    res.status(200).json({
      success: true,
      data: scanResult
    });
  } catch (error) {
    console.error('Scan error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to perform scan',
      message: error.message
    });
  }
});

/**
 * @route   GET /api/scan/history
 * @desc    Get scan history
 * @access  Public
 */
router.get('/history', async (req, res) => {
  try {
    const scanHistory = await scanService.getScanHistory();
    
    res.status(200).json({
      success: true,
      data: scanHistory
    });
  } catch (error) {
    console.error('Error fetching scan history:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch scan history',
      message: error.message
    });
  }
});

/**
 * @route   GET /api/scan/:scanId
 * @desc    Get scan results by ID
 * @access  Public
 */
router.get('/:scanId', async (req, res) => {
  try {
    const { scanId } = req.params;
    const scanResult = await scanService.getScanById(scanId);
    
    if (!scanResult) {
      return res.status(404).json({
        success: false,
        error: 'Scan not found'
      });
    }
    
    res.status(200).json({
      success: true,
      data: scanResult
    });
  } catch (error) {
    console.error('Error fetching scan:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch scan',
      message: error.message
    });
  }
});

module.exports = router;