const express = require('express');
const router = express.Router();
const scanService = require('../services/scanService');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = process.env.UPLOAD_DIR || './uploads';
    
    // Ensure upload directory exists
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    // Generate unique filename
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB limit
  }
});

/**
 * @route   POST /api/scan
 * @desc    Initiate a vulnerability scan
 * @access  Public
 */
router.post('/', async (req, res) => {
  try {
    const { target, scanType, profileName, sourceType, customParams } = req.body;
    
    if (!target) {
      return res.status(400).json({ 
        success: false,
        error: 'Target URL or codebase path is required' 
      });
    }
    
    const scanResult = await scanService.performScan(
      target, 
      scanType || 'full', 
      profileName || 'webApp',
      customParams || {},
      sourceType || 'url'
    );
    
    res.status(200).json({
      success: true,
      data: scanResult
    });
  } catch (error) {
    console.error('Scan error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to perform scan',
      message: error.message
    });
  }
});

/**
 * @route   POST /api/scan/upload
 * @desc    Upload and scan a codebase
 * @access  Public
 */
router.post('/upload', upload.single('codebase'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'No file uploaded'
      });
    }
    
    const { scanType, profileName, customParams } = req.body;
    
    // Start scan on the uploaded file
    const scanResult = await scanService.performScan(
      req.file.path,
      scanType || 'full',
      profileName || 'webApp',
      customParams || {},
      'upload'
    );
    
    res.status(200).json({
      success: true,
      data: scanResult
    });
  } catch (error) {
    console.error('Upload scan error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to scan uploaded file',
      message: error.message
    });
  }
});

/**
 * @route   POST /api/scan/github
 * @desc    Scan a GitHub repository
 * @access  Public
 */
router.post('/github', async (req, res) => {
  try {
    const { repoUrl, scanType, profileName, customParams } = req.body;
    
    if (!repoUrl) {
      return res.status(400).json({
        success: false,
        error: 'GitHub repository URL is required'
      });
    }
    
    // Start scan on the GitHub repository
    const scanResult = await scanService.performScan(
      repoUrl,
      scanType || 'full',
      profileName || 'webApp',
      customParams || {},
      'github'
    );
    
    res.status(200).json({
      success: true,
      data: scanResult
    });
  } catch (error) {
    console.error('GitHub scan error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to scan GitHub repository',
      message: error.message
    });
  }
});

/**
 * @route   GET /api/scan/profiles
 * @desc    Get available scan profiles
 * @access  Public
 */
router.get('/profiles', async (req, res) => {
  try {
    const profiles = await scanService.getScanProfiles();
    
    res.status(200).json({
      success: true,
      data: profiles
    });
  } catch (error) {
    console.error('Error fetching scan profiles:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch scan profiles',
      message: error.message
    });
  }
});

/**
 * @route   GET /api/scan/history
 * @desc    Get scan history
 * @access  Public
 */
router.get('/history', async (req, res) => {
  try {
    const scanHistory = await scanService.getScanHistory();
    
    res.status(200).json({
      success: true,
      data: scanHistory
    });
  } catch (error) {
    console.error('Error fetching scan history:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch scan history',
      message: error.message
    });
  }
});

/**
 * @route   GET /api/scan/:scanId
 * @desc    Get scan results by ID
 * @access  Public
 */
router.get('/:scanId', async (req, res) => {
  try {
    const { scanId } = req.params;
    const scanResult = await scanService.getScanById(scanId);
    
    if (!scanResult) {
      return res.status(404).json({
        success: false,
        error: 'Scan not found'
      });
    }
    
    res.status(200).json({
      success: true,
      data: scanResult
    });
  } catch (error) {
    console.error('Error fetching scan:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch scan',
      message: error.message
    });
  }
});

module.exports = router;