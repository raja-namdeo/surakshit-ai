import React, { useState } from 'react';
import '../styles/GitHubIntegration.css';

const GitHubIntegration = ({ onRepositorySelected }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [repositories, setRepositories] = useState([]);
  const [selectedRepo, setSelectedRepo] = useState('');
  const [branches, setBranches] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Function to handle GitHub authentication
  const handleAuthentication = () => {
    setIsLoading(true);
    setError(null);
    
    // In a real app, this would redirect to GitHub OAuth
    // For demo purposes, we'll simulate a successful authentication
    setTimeout(() => {
      setIsAuthenticated(true);
      setIsLoading(false);
      
      // Mock repositories data
      const mockRepositories = [
        { id: 1, name: 'my-web-app', full_name: 'user/my-web-app' },
        { id: 2, name: 'react-project', full_name: 'user/react-project' },
        { id: 3, name: 'node-api', full_name: 'user/node-api' },
        { id: 4, name: 'python-ml', full_name: 'user/python-ml' }
      ];
      
      setRepositories(mockRepositories);
    }, 1500);
    
    // In a real app, this would be:
    /*
    // Redirect to GitHub OAuth
    const clientId = 'your-github-client-id';
    const redirectUri = encodeURIComponent(`${window.location.origin}/github/callback`);
    const scope = encodeURIComponent('repo');
    
    window.location.href = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scope}`;
    */
  };

  // Function to handle repository selection
  const handleRepoChange = (e) => {
    const repoName = e.target.value;
    setSelectedRepo(repoName);
    setSelectedBranch('');
    setBranches([]);
    
    if (repoName) {
      setIsLoading(true);
      
      // In a real app, this would fetch branches from GitHub API
      setTimeout(() => {
        // Mock branches data
        const mockBranches = [
          { name: 'main' },
          { name: 'develop' },
          { name: 'feature/auth' },
          { name: 'bugfix/login' }
        ];
        
        setBranches(mockBranches);
        setIsLoading(false);
      }, 1000);
    }
  };

  // Function to handle branch selection
  const handleBranchChange = (e) => {
    setSelectedBranch(e.target.value);
  };

  // Function to handle scan initiation
  const handleScan = () => {
    if (!selectedRepo || !selectedBranch) {
      setError('Please select both a repository and a branch');
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    // In a real app, this would call the backend API
    setTimeout(() => {
      setIsLoading(false);
      
      // Call the callback function with selected repository info
      onRepositorySelected({
        repository: selectedRepo,
        branch: selectedBranch,
        scanId: 'github-scan-' + Date.now()
      });
    }, 1500);
  };

  // Function to handle sign out
  const handleSignOut = () => {
    setIsAuthenticated(false);
    setRepositories([]);
    setSelectedRepo('');
    setBranches([]);
    setSelectedBranch('');
  };

  return (
    <div className="github-integration-container">
      <h3>GitHub Repository Integration</h3>
      <p className="github-description">Connect your GitHub repository to scan for vulnerabilities</p>
      
      {!isAuthenticated ? (
        <div className="github-auth-section">
          <button 
            className="github-auth-button"
            onClick={handleAuthentication}
            disabled={isLoading}
          >
            {isLoading ? 'Connecting...' : 'Connect with GitHub'}
          </button>
          
          <div className="github-benefits">
            <h4>Benefits:</h4>
            <ul>
              <li>Scan your repositories directly without downloading</li>
              <li>Automatic branch detection</li>
              <li>Continuous scanning on new commits (with webhook setup)</li>
            </ul>
          </div>
        </div>
      ) : (
        <div className="github-repo-section">
          <div className="github-user-info">
            <span>Connected to GitHub</span>
            <button className="github-signout-button" onClick={handleSignOut}>
              Sign Out
            </button>
          </div>
          
          <div className="github-selection-container">
            <div className="select-group">
              <label htmlFor="repository-select">Select Repository:</label>
              <select 
                id="repository-select"
                value={selectedRepo}
                onChange={handleRepoChange}
                disabled={isLoading}
              >
                <option value="">-- Select a repository --</option>
                {repositories.map(repo => (
                  <option key={repo.id} value={repo.full_name}>
                    {repo.full_name}
                  </option>
                ))}
              </select>
            </div>
            
            {selectedRepo && (
              <div className="select-group">
                <label htmlFor="branch-select">Select Branch:</label>
                <select 
                  id="branch-select"
                  value={selectedBranch}
                  onChange={handleBranchChange}
                  disabled={isLoading || branches.length === 0}
                >
                  <option value="">-- Select a branch --</option>
                  {branches.map(branch => (
                    <option key={branch.name} value={branch.name}>
                      {branch.name}
                    </option>
                  ))}
                </select>
              </div>
            )}
            
            <button 
              className="github-scan-button"
              onClick={handleScan}
              disabled={isLoading || !selectedRepo || !selectedBranch}
            >
              {isLoading ? 'Processing...' : 'Scan Selected Branch'}
            </button>
          </div>
          
          {error && <div className="github-error">{error}</div>}
        </div>
      )}
    </div>
  );
};

export default GitHubIntegration;