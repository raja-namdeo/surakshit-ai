import React, { useState } from 'react';
import '../styles/FileUpload.css';

const FileUpload = ({ onUploadComplete }) => {
  const [file, setFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState(null);
  const [progress, setProgress] = useState(0);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    setError(null);
    
    // Validate file type
    if (selectedFile && selectedFile.type !== 'application/zip' && !selectedFile.name.endsWith('.zip')) {
      setError('Please upload a valid zip file');
      setFile(null);
      return;
    }
    
    setFile(selectedFile);
  };

  const handleUpload = async () => {
    if (!file) {
      setError('Please select a file to upload');
      return;
    }

    setIsUploading(true);
    setProgress(0);
    setError(null);

    // Create form data
    const formData = new FormData();
    formData.append('codebase', file);

    try {
      // In a real app, this would be an API call
      // Simulating API call with progress
      const interval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) {
            clearInterval(interval);
            return 90;
          }
          return prev + 10;
        });
      }, 300);

      // Simulate API call delay
      setTimeout(() => {
        clearInterval(interval);
        setProgress(100);
        setIsUploading(false);
        
        // Call the callback function with mock data
        onUploadComplete({
          success: true,
          message: 'File uploaded successfully',
          scanId: 'mock-scan-' + Date.now()
        });
        
        // Reset file
        setFile(null);
      }, 3000);

      // In a real app, this would be:
      /*
      const response = await fetch('/api/scan/upload', {
        method: 'POST',
        body: formData,
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setProgress(percentCompleted);
        }
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'Failed to upload file');
      }
      
      setIsUploading(false);
      onUploadComplete(result);
      setFile(null);
      */
    } catch (err) {
      setIsUploading(false);
      setError(err.message || 'Failed to upload file');
    }
  };

  return (
    <div className="file-upload-container">
      <h3>Upload Codebase</h3>
      <p className="upload-description">Upload your codebase as a zip file to scan for vulnerabilities</p>
      
      <div className="file-input-container">
        <input 
          type="file" 
          id="codebase-upload" 
          onChange={handleFileChange}
          accept=".zip"
          disabled={isUploading}
        />
        <label htmlFor="codebase-upload" className={`file-input-label ${isUploading ? 'disabled' : ''}`}>
          {file ? file.name : 'Choose zip file'}
        </label>
        
        <button 
          className="upload-button"
          onClick={handleUpload}
          disabled={!file || isUploading}
        >
          {isUploading ? 'Uploading...' : 'Upload & Scan'}
        </button>
      </div>
      
      {error && <div className="upload-error">{error}</div>}
      
      {isUploading && (
        <div className="upload-progress-container">
          <div className="upload-progress-bar" style={{ width: `${progress}%` }}></div>
          <div className="upload-progress-text">{progress}%</div>
        </div>
      )}
      
      <div className="upload-requirements">
        <h4>Requirements:</h4>
        <ul>
          <li>File must be a valid .zip archive</li>
          <li>Maximum file size: 50MB</li>
          <li>Archive should contain source code files</li>
        </ul>
      </div>
    </div>
  );
};

export default FileUpload;