import React, { useState, useEffect } from 'react';
import ScanButton from './ScanButton';
import ReportSection from './ReportSection';
import AutofixButton from './AutofixButton';
import FileUpload from './FileUpload';
import GitHubIntegration from './GitHubIntegration';
import '../styles/Dashboard.css';

const Dashboard = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [isScanning, setIsScanning] = useState(false);
  const [scanCompleted, setScanCompleted] = useState(false);
  const [isFixing, setIsFixing] = useState(false);
  const [activeTab, setActiveTab] = useState('upload');
  const [scanSource, setScanSource] = useState('');
  const [scanProfiles, setScanProfiles] = useState([]);
  const [selectedProfile, setSelectedProfile] = useState('webApp');

  // Fetch scan profiles when component mounts
  useEffect(() => {
    fetchScanProfiles();
  }, []);

  // Function to fetch scan profiles from the API
  const fetchScanProfiles = async () => {
    try {
      // In a real app, this would be an API call
      // For now, we'll use mock data
      const mockProfiles = [
        { id: 'webApp', name: 'Web Application', description: 'Comprehensive scan for web applications' },
        { id: 'api', name: 'API', description: 'Focused scan for REST APIs' },
        { id: 'mobileBackend', name: 'Mobile Backend', description: 'Security scan for mobile app backends' },
        { id: 'ecommerce', name: 'E-commerce', description: 'Specialized scan for e-commerce applications' },
        { id: 'quick', name: 'Quick Scan', description: 'Fast scan with limited scope' },
        { id: 'thorough', name: 'Thorough Scan', description: 'Comprehensive scan with all available scanners' }
      ];
      
      setScanProfiles(mockProfiles);
      
      // Uncomment this for real API integration
      /*
      const response = await fetch('/api/scan/profiles');
      const data = await response.json();
      
      if (data.success) {
        setScanProfiles(data.data);
      }
      */
    } catch (error) {
      console.error('Error fetching scan profiles:', error);
    }
  };

  // Function to handle profile change
  const handleProfileChange = (profileId) => {
    setSelectedProfile(profileId);
  };

  // Mock function to fetch vulnerabilities
  const fetchVulnerabilities = async () => {
    // In a real app, this would be an API call
    try {
      // Simulating API call delay
      setIsScanning(true);
      
      // Mock data
      setTimeout(() => {
        const mockVulnerabilities = [
          { id: 1, severity: 'high', type: 'SQL Injection', location: '/api/users', description: 'Unsanitized user input in SQL query' },
          { id: 2, severity: 'medium', type: 'XSS', location: '/views/profile.html', description: 'Reflected XSS vulnerability in user profile' },
          { id: 3, severity: 'low', type: 'Outdated Library', location: 'package.json', description: 'Using outdated version of express.js with known vulnerabilities' }
        ];
        
        setVulnerabilities(mockVulnerabilities);
        setIsScanning(false);
        setScanCompleted(true);
      }, 2000);
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
      setIsScanning(false);
    }
  };

  // Function to handle scan initiation
  const handleScan = () => {
    setScanCompleted(false);
    fetchVulnerabilities();
  };

  // Function to handle autofix
  const handleAutofix = () => {
    setIsFixing(true);
    
    // Simulate fixing process
    setTimeout(() => {
      // In a real app, this would call the backend API to apply fixes
      setVulnerabilities(prev => 
        prev.map(vuln => ({ ...vuln, fixed: true }))
      );
      setIsFixing(false);
    }, 3000);
  };

  // Function to handle upload completion
  const handleUploadComplete = (result) => {
    if (result.success) {
      setScanSource('upload');
      setActiveTab('scan');
      handleScan();
    }
  };

  // Function to handle repository selection
  const handleRepositorySelected = (repoInfo) => {
    setScanSource('github');
    setActiveTab('scan');
    handleScan();
  };

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <h1>Surakshit AI - Security Vulnerability Dashboard</h1>
        <p>Detect, analyze, and remediate security vulnerabilities with AI assistance</p>
      </header>
      
      <div className="dashboard-tabs">
        <button 
          className={`tab-button ${activeTab === 'upload' ? 'active' : ''}`}
          onClick={() => setActiveTab('upload')}
        >
          Upload Codebase
        </button>
        <button 
          className={`tab-button ${activeTab === 'github' ? 'active' : ''}`}
          onClick={() => setActiveTab('github')}
        >
          GitHub Integration
        </button>
        {scanCompleted && (
          <button 
            className={`tab-button ${activeTab === 'scan' ? 'active' : ''}`}
            onClick={() => setActiveTab('scan')}
          >
            Scan Results
          </button>
        )}
      </div>
      
      <div className="dashboard-content">
        {activeTab === 'upload' && (
          <FileUpload onUploadComplete={handleUploadComplete} />
        )}
        
        {activeTab === 'github' && (
          <GitHubIntegration onRepositorySelected={handleRepositorySelected} />
        )}
        
        {activeTab === 'scan' && (
          <>
            <div className="scan-source-info">
              {scanSource === 'upload' && (
                <p>Scanning uploaded codebase</p>
              )}
              {scanSource === 'github' && (
                <p>Scanning GitHub repository</p>
              )}
            </div>
            
            <div className="dashboard-controls">
              <ScanButton 
                onScan={handleScan} 
                isScanning={isScanning} 
                selectedProfile={selectedProfile}
                onProfileChange={handleProfileChange}
                profiles={scanProfiles}
              />
              {scanCompleted && vulnerabilities.length > 0 && (
                <AutofixButton onAutofix={handleAutofix} isFixing={isFixing} />
              )}
            </div>
            
            {scanCompleted && (
              <ReportSection 
                vulnerabilities={vulnerabilities} 
                isFixing={isFixing} 
              />
            )}
            
            {isScanning && (
              <div className="scanning-indicator">
                <p>Scanning for vulnerabilities using {scanProfiles.find(p => p.id === selectedProfile)?.name || 'selected profile'}...</p>
                <div className="spinner"></div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Dashboard;