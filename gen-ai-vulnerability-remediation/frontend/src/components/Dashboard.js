import React, { useState, useEffect } from 'react';
import ScanButton from './ScanButton';
import ReportSection from './ReportSection';
import AutofixButton from './AutofixButton';
import '../styles/Dashboard.css';

const Dashboard = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [isScanning, setIsScanning] = useState(false);
  const [scanCompleted, setScanCompleted] = useState(false);
  const [isFixing, setIsFixing] = useState(false);

  // Mock function to fetch vulnerabilities
  const fetchVulnerabilities = async () => {
    // In a real app, this would be an API call
    try {
      // Simulating API call delay
      setIsScanning(true);
      
      // Mock data
      setTimeout(() => {
        const mockVulnerabilities = [
          { id: 1, severity: 'high', type: 'SQL Injection', location: '/api/users', description: 'Unsanitized user input in SQL query' },
          { id: 2, severity: 'medium', type: 'XSS', location: '/views/profile.html', description: 'Reflected XSS vulnerability in user profile' },
          { id: 3, severity: 'low', type: 'Outdated Library', location: 'package.json', description: 'Using outdated version of express.js with known vulnerabilities' }
        ];
        
        setVulnerabilities(mockVulnerabilities);
        setIsScanning(false);
        setScanCompleted(true);
      }, 2000);
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
      setIsScanning(false);
    }
  };

  // Function to handle scan initiation
  const handleScan = () => {
    setScanCompleted(false);
    fetchVulnerabilities();
  };

  // Function to handle autofix
  const handleAutofix = () => {
    setIsFixing(true);
    
    // Simulate fixing process
    setTimeout(() => {
      // In a real app, this would call the backend API to apply fixes
      setVulnerabilities(prev => 
        prev.map(vuln => ({ ...vuln, fixed: true }))
      );
      setIsFixing(false);
    }, 3000);
  };

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <h1>Surakshit AI - Security Vulnerability Dashboard</h1>
        <p>Detect, analyze, and remediate security vulnerabilities with AI assistance</p>
      </header>
      
      <div className="dashboard-controls">
        <ScanButton onScan={handleScan} isScanning={isScanning} />
        {scanCompleted && vulnerabilities.length > 0 && (
          <AutofixButton onAutofix={handleAutofix} isFixing={isFixing} />
        )}
      </div>
      
      {scanCompleted && (
        <ReportSection 
          vulnerabilities={vulnerabilities} 
          isFixing={isFixing} 
        />
      )}
      
      {isScanning && (
        <div className="scanning-indicator">
          <p>Scanning for vulnerabilities...</p>
          {/* Add a loading spinner here */}
        </div>
      )}
    </div>
  );
};

export default Dashboard;